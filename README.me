# ‚òï TP2-DAR2025: Sockets TCP - √âchange de Donn√©es Complexes

*√âvolution du projet client-serveur avec gestion de cha√Ænes de caract√®res et d'objets s√©rialisables pour le cours de LSI3.*

**üßë‚Äçüíª Auteur :** Mouhamed Gharsallah  
**üéì Classe :** LSI3 - TP2

---

## üìù Aper√ßu du Projet

Ce projet est la suite du TP1 et s'inscrit dans le cadre du module d'Applications R√©parties. L'objectif est de faire √©voluer notre application client-serveur pour g√©rer des communications plus complexes que l'√©change d'un simple octet.

Le projet se concentre sur deux m√©canismes de communication essentiels en Java :
1. L'√©change de **cha√Ænes de caract√®res** (CC) pour envoyer des commandes compl√®tes.
2. L'√©change d'**objets s√©rialisables** pour une communication structur√©e et orient√©e objet.

## üìÇ Structure du Projet

Le projet est organis√© autour d'une nouvelle architecture de packages et de deux branches Git, chacune correspondant √† une activit√© du TP2.

### Nouvelle structure de packages :
- **`clientPackage`**: Contient la classe `Client`.
- **`serverPackage`**: Contient la classe `Server`.
- **`model`**: Contient la classe `Operation` (utilis√©e dans l'Activit√© 2.2).

---

### 1Ô∏è‚É£ Activit√© 2.1: √âchange de Cha√Ænes de Caract√®res via Sockets TCP üí¨
*(Branche: `Med-Gh-TN-Activite_2_1`)*

> L'application est modifi√©e pour que le client envoie une op√©ration math√©matique compl√®te (ex: "55 * 25") sous forme de cha√Æne. Le serveur re√ßoit cette cha√Æne, la traite, effectue le calcul et renvoie le r√©sultat. Cette √©tape utilise les classes `BufferedReader` et `PrintWriter` pour g√©rer les flux de texte.

### 2Ô∏è‚É£ Activit√© 2.2: √âchange d'Objets S√©rialisables üì¶
*(Branche: `Med-Gh-TN-Activite_2_2`)*

> Pour une communication plus propre, cette activit√© remplace l'√©change de cha√Ænes par l'√©change d'objets `Operation` qui impl√©mentent l'interface `Serializable`. Le client envoie un objet contenant l'op√©ration, et le serveur renvoie ce m√™me objet mis √† jour avec le r√©sultat. La communication se fait via `ObjectOutputStream` et `ObjectInputStream`.

---

## üöÄ Comment Compiler et Ex√©cuter

Assurez-vous d'avoir le **JDK (Java Development Kit)** install√©. Le projet utilisant des packages, les commandes de compilation et d'ex√©cution sont sp√©cifiques.

### Compilation
Ouvrez un terminal √† la racine de votre projet et ex√©cutez la commande suivante pour compiler tous les fichiers source et placer les fichiers `.class` dans un dossier `bin`.

```bash
# Cr√©e le dossier 'bin' s'il n'existe pas
mkdir -p bin

# Compile tous les fichiers .java et place les .class dans le dossier bin
javac -d bin src/clientPackage/*.java src/serverPackage/*.java src/model/*.java
